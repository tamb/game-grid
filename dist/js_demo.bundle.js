/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./dist/main.js":
/*!**********************!*\
  !*** ./dist/main.js ***!
  \**********************/
/***/ ((module) => {

/*! For license information please see main.js.LICENSE.txt */
!function(e,n){ true?module.exports=n():0}(self,(function(){return(()=>{"use strict";var __webpack_modules__={"./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/styles.scss":(module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(function(i){return i[1]});\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ".gamegrid * {\\n  box-sizing: border-box; }\\n\\n.gamegrid__stage {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  flex-wrap: wrap;\\n  box-sizing: border-box;\\n  border: 1px solid; }\\n\\n.gamegrid__row {\\n  display: flex;\\n  flex-basis: 100%;\\n  max-width: 100%;\\n  box-sizing: border-box; }\\n\\n.gamegrid__cell {\\n  flex: 1 0 auto;\\n  height: auto;\\n  overflow: hidden;\\n  box-sizing: border-box;\\n  border: 1px solid; }\\n  .gamegrid__cell--active {\\n    outline: 4px solid red; }\\n  .gamegrid__cell::before {\\n    content: \\"\\";\\n    float: left;\\n    padding-top: 100%; }\\n", ""]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://GamGrid/./src/styles.scss?./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet%5B1%5D.rules%5B1%5D.use%5B2%5D!./node_modules/sass-loader/dist/cjs.js')},"./node_modules/css-loader/dist/runtime/api.js":module=>{eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item);\n\n      if (item[2]) {\n        return "@media ".concat(item[2], " {").concat(content, "}");\n      }\n\n      return content;\n    }).join("");\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === "string") {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, ""]];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\n//# sourceURL=webpack://GamGrid/./node_modules/css-loader/dist/runtime/api.js?')},"./src/styles.scss":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_1_use_2_node_modules_sass_loader_dist_cjs_js_styles_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!../node_modules/sass-loader/dist/cjs.js!./styles.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/styles.scss");\n\n            \n\nvar options = {};\n\noptions.insert = "head";\noptions.singleton = false;\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_1_use_2_node_modules_sass_loader_dist_cjs_js_styles_scss__WEBPACK_IMPORTED_MODULE_1__.default, options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_1_use_2_node_modules_sass_loader_dist_cjs_js_styles_scss__WEBPACK_IMPORTED_MODULE_1__.default.locals || {});\n\n//# sourceURL=webpack://GamGrid/./src/styles.scss?')},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : 0;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && typeof btoa !== 'undefined') {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack://GamGrid/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?")},"./src/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _styles_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles.scss */ "./src/styles.scss");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./src/utils.ts");\n/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./enums */ "./src/enums.js");\nvar __assign = (undefined && undefined.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n};\r\n\r\n\r\n\r\nvar INITIAL_STATE = {\r\n    active_coords: [0, 0],\r\n    prev_coords: [0, 0],\r\n    current_direction: "",\r\n    rendered: false,\r\n    moves: [[0, 0]],\r\n};\r\nvar DIRECTIONS = {\r\n    UP: "up",\r\n    DOWN: "down",\r\n    LEFT: "left",\r\n    RIGHT: "right",\r\n};\r\nvar HtmlGameGrid = /** @class */ (function () {\r\n    function HtmlGameGrid(query, config) {\r\n        this.options = __assign({ \r\n            // active_class: "gamegrid-active",\r\n            arrow_controls: true, wasd_controls: true, \r\n            // container_class: "",\r\n            infinite_x: true, infinite_y: true, clickable: true, rewind_limit: 20 }, config.options);\r\n        this.refs = {\r\n            container: document.querySelector(query),\r\n            rows: [],\r\n            cells: [],\r\n        };\r\n        this.matrix = config.matrix;\r\n        this.state = __assign(__assign({}, INITIAL_STATE), config.state);\r\n        this.containerFocus = this.containerFocus.bind(this);\r\n        this.containerBlur = this.containerBlur.bind(this);\r\n        this.handleKeyDown = this.handleKeyDown.bind(this);\r\n        this.handleCellClick = this.handleCellClick.bind(this);\r\n        this.init();\r\n    }\r\n    // API\r\n    HtmlGameGrid.prototype.getOptions = function () {\r\n        return this.options;\r\n    };\r\n    HtmlGameGrid.prototype.setOptions = function (newOptions) {\r\n        this.options = __assign(__assign({}, this.options), newOptions);\r\n    };\r\n    HtmlGameGrid.prototype.getRefs = function () {\r\n        return this.refs;\r\n    };\r\n    HtmlGameGrid.prototype.destroy = function () {\r\n        this.state.rendered ? this.dettachHandlers() : null;\r\n        this.refs = __assign(__assign({}, this.refs), { rows: [], cells: [] });\r\n    };\r\n    HtmlGameGrid.prototype.getState = function () {\r\n        return this.state;\r\n    };\r\n    HtmlGameGrid.prototype.moveLeft = function () {\r\n        this.setStateSync({\r\n            next_coords: [\r\n                this.state.active_coords[0],\r\n                this.state.active_coords[1] - 1,\r\n            ],\r\n            current_direction: DIRECTIONS.LEFT,\r\n        });\r\n        _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.MOVE_LEFT);\r\n        this.finishMove();\r\n    };\r\n    HtmlGameGrid.prototype.moveUp = function () {\r\n        this.setStateSync({\r\n            next_coords: [\r\n                this.state.active_coords[0] - 1,\r\n                this.state.active_coords[1],\r\n            ],\r\n            current_direction: DIRECTIONS.UP,\r\n        });\r\n        _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.MOVE_UP);\r\n        this.finishMove();\r\n    };\r\n    HtmlGameGrid.prototype.moveRight = function () {\r\n        this.setStateSync({\r\n            next_coords: [\r\n                this.state.active_coords[0],\r\n                this.state.active_coords[1] + 1,\r\n            ],\r\n            current_direction: DIRECTIONS.RIGHT,\r\n        });\r\n        _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.MOVE_RIGHT);\r\n        this.finishMove();\r\n    };\r\n    HtmlGameGrid.prototype.moveDown = function () {\r\n        this.setStateSync({\r\n            next_coords: [\r\n                this.state.active_coords[0] + 1,\r\n                this.state.active_coords[1],\r\n            ],\r\n            current_direction: DIRECTIONS.DOWN,\r\n        });\r\n        _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.MOVE_DOWN);\r\n        this.finishMove();\r\n    };\r\n    HtmlGameGrid.prototype.setMatrix = function (m) {\r\n        this.matrix = m;\r\n    };\r\n    HtmlGameGrid.prototype.getMatrix = function () {\r\n        return this.matrix;\r\n    };\r\n    HtmlGameGrid.prototype.setStateSync = function (obj) {\r\n        var newState = __assign(__assign({}, this.state), obj);\r\n        this.state = newState;\r\n        _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.STATE_UPDATED);\r\n    };\r\n    HtmlGameGrid.prototype.render = function () {\r\n        var _this = this;\r\n        this.refs.container.classList.add("gamegrid");\r\n        this.refs.container.setAttribute("tabindex", "0");\r\n        this.refs.container.setAttribute("data-gamegrid-ref", "container");\r\n        var grid = document.createDocumentFragment();\r\n        this.matrix.forEach(function (rowData, rI) {\r\n            var row = document.createElement("div");\r\n            _this.options.row_class ? row.classList.add(_this.options.row_class) : null;\r\n            row.setAttribute("data-gamegrid-row-index", rI.toString());\r\n            row.setAttribute("data-gamegrid-ref", "row");\r\n            row.classList.add("gamegrid__row");\r\n            _this.refs.cells.push([]);\r\n            rowData.forEach(function (cellData, cI) {\r\n                var _a;\r\n                var cell = document.createElement("div");\r\n                (0,_utils__WEBPACK_IMPORTED_MODULE_1__.renderAttributes)(cell, [\r\n                    ["data-gamegrid-ref", "cell"],\r\n                    ["data-gamegrid-row-index", rI.toString()],\r\n                    ["data-gamegrid-col-index", cI.toString()],\r\n                    ["data-gamegrid-coords", rI + "," + cI],\r\n                ]);\r\n                cell.style.width = 100 / rowData.length + "%";\r\n                (_a = cellData.cellAttributes) === null || _a === void 0 ? void 0 : _a.forEach(function (attr) {\r\n                    cell.setAttribute(attr[0], attr[1]);\r\n                });\r\n                cell.classList.add("gamegrid__cell");\r\n                cell.setAttribute("tabindex", _this.options.clickable ? "0" : "-1");\r\n                if (cellData.renderFunction) {\r\n                    cell.appendChild(cellData.renderFunction());\r\n                }\r\n                row.appendChild(cell);\r\n                _this.refs.cells[rI].push(cell);\r\n            });\r\n            _this.refs.rows.push(row);\r\n            grid.appendChild(row);\r\n        });\r\n        this.refs.container.appendChild(grid);\r\n        this.setStateSync({ rendered: true });\r\n        _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.RENDERED);\r\n    };\r\n    HtmlGameGrid.prototype.setFocusToCell = function (row, col) {\r\n        var _a, _b;\r\n        var cells = this.getRefs().cells;\r\n        if (typeof row === "number" && typeof col === "number") {\r\n            cells[row][col].focus();\r\n            this.removeActiveClasses();\r\n            cells[row][col].classList.add("gamegrid__cell--active");\r\n            this.setStateSync({ active_coords: [row, col] });\r\n        }\r\n        else {\r\n            (_a = this.getActiveCell()) === null || _a === void 0 ? void 0 : _a.focus();\r\n            this.removeActiveClasses();\r\n            (_b = this.getActiveCell()) === null || _b === void 0 ? void 0 : _b.classList.add("gamegrid__cell--active");\r\n        }\r\n    };\r\n    HtmlGameGrid.prototype.removeActiveClasses = function () {\r\n        this.getRefs().cells.forEach(function (cellRow) {\r\n            cellRow.forEach(function (cell) {\r\n                cell.classList.remove("gamegrid__cell--active");\r\n            });\r\n        });\r\n    };\r\n    HtmlGameGrid.prototype.setFocusToContainer = function () {\r\n        this.getRefs().container.focus();\r\n    };\r\n    HtmlGameGrid.prototype.getActiveCell = function () {\r\n        return this.getRefs().cells[this.state.active_coords[0]][this.state.active_coords[1]];\r\n    };\r\n    //INPUT\r\n    HtmlGameGrid.prototype.init = function () {\r\n        this.state.rendered ? this.attachHandlers() : null;\r\n    };\r\n    HtmlGameGrid.prototype.addToMoves = function () {\r\n        var clonedMoves = __spreadArray([], this.getState().moves);\r\n        clonedMoves.unshift(this.state.active_coords);\r\n        if (clonedMoves.length > this.options.rewind_limit) {\r\n            clonedMoves.shift();\r\n        }\r\n        this.setStateSync({ moves: clonedMoves });\r\n    };\r\n    HtmlGameGrid.prototype.testLimit = function () {\r\n        // use state direction, and state active coords\r\n        var row = this.state.next_coords[0];\r\n        var col = this.state.next_coords[1];\r\n        var rowFinalIndex = this.matrix.length - 1;\r\n        var colFinalIndex = this.matrix[this.state.active_coords[0]].length - 1; // todo: test for variable col length\r\n        switch (this.state.current_direction) {\r\n            case DIRECTIONS.DOWN:\r\n                if (this.state.next_coords[0] > rowFinalIndex) {\r\n                    if (!this.options.infinite_y) {\r\n                        row = rowFinalIndex;\r\n                        _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.LIMIT_Y);\r\n                        _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.LIMIT);\r\n                    }\r\n                    else {\r\n                        row = 0;\r\n                        _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.WRAP_Y);\r\n                        _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.WRAP);\r\n                    }\r\n                }\r\n                break;\r\n            case DIRECTIONS.LEFT:\r\n                if (this.state.next_coords[1] < 0) {\r\n                    if (this.options.infinite_x) {\r\n                        col = colFinalIndex;\r\n                        _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.WRAP_X);\r\n                        _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.WRAP);\r\n                    }\r\n                    else {\r\n                        col = 0;\r\n                        _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.LIMIT_X);\r\n                        _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.LIMIT);\r\n                    }\r\n                }\r\n                break;\r\n            case DIRECTIONS.RIGHT:\r\n                if (this.state.next_coords[1] > colFinalIndex) {\r\n                    if (!this.options.infinite_x) {\r\n                        col = colFinalIndex;\r\n                        _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.LIMIT_X);\r\n                        _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.LIMIT);\r\n                    }\r\n                    else {\r\n                        col = 0;\r\n                        _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.WRAP_X);\r\n                        _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.WRAP);\r\n                    }\r\n                }\r\n                break;\r\n            case DIRECTIONS.UP:\r\n                if (this.state.next_coords[0] < 0) {\r\n                    if (this.options.infinite_y) {\r\n                        row = rowFinalIndex;\r\n                        _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.WRAP_Y);\r\n                        _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.WRAP);\r\n                    }\r\n                    else {\r\n                        row = 0;\r\n                        _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.LIMIT_Y);\r\n                        _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.LIMIT);\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n        this.setStateSync({\r\n            next_coords: [row, col],\r\n            active_coords: [row, col],\r\n            prev_coords: this.state.active_coords,\r\n        });\r\n    };\r\n    HtmlGameGrid.prototype.testInteractive = function () {\r\n        var _a;\r\n        var coords = this.state.next_coords;\r\n        if (((_a = this.matrix[coords[0]][coords[1]]) === null || _a === void 0 ? void 0 : _a.type) === "interactive") {\r\n            _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.MOVE_COLLISION);\r\n        }\r\n    };\r\n    HtmlGameGrid.prototype.testBarrier = function () {\r\n        var _a;\r\n        var coords = this.state.next_coords;\r\n        if (((_a = this.matrix[coords[0]][coords[1]]) === null || _a === void 0 ? void 0 : _a.type) === "barrier") {\r\n            this.setStateSync({\r\n                active_coords: this.state.prev_coords,\r\n                prev_coords: this.state.active_coords,\r\n            });\r\n            _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.MOVE_BLOCKED);\r\n        }\r\n    };\r\n    HtmlGameGrid.prototype.testSpace = function () {\r\n        var _a;\r\n        var coords = this.state.next_coords;\r\n        if (((_a = this.matrix[coords[0]][coords[1]]) === null || _a === void 0 ? void 0 : _a.type) === "open") {\r\n            if (this.matrix[this.state.prev_coords[0]][this.state.prev_coords[1]]\r\n                .type === "interactive") {\r\n                _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.MOVE_DETTACH);\r\n            }\r\n            _utils__WEBPACK_IMPORTED_MODULE_1__.fireCustomEvent.call(this, _enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum.MOVE_LAND);\r\n        }\r\n    };\r\n    HtmlGameGrid.prototype.finishMove = function () {\r\n        this.testLimit();\r\n        this.testSpace();\r\n        this.testInteractive();\r\n        this.testBarrier();\r\n        this.state.rendered ? this.setFocusToCell() : null;\r\n        this.addToMoves();\r\n    };\r\n    HtmlGameGrid.prototype.handleDirection = function (event) {\r\n        switch (event.code) {\r\n            case "ArrowLeft": {\r\n                //left\r\n                this.moveLeft();\r\n                break;\r\n            }\r\n            case "KeyA": {\r\n                //left\r\n                this.moveLeft();\r\n                break;\r\n            }\r\n            case "ArrowUp": {\r\n                //up\r\n                this.moveUp();\r\n                break;\r\n            }\r\n            case "KeyW": {\r\n                //up\r\n                this.moveUp();\r\n                break;\r\n            }\r\n            case "ArrowRight": {\r\n                //right\r\n                this.moveRight();\r\n                break;\r\n            }\r\n            case "KeyD": {\r\n                //right\r\n                this.moveRight();\r\n                break;\r\n            }\r\n            case "ArrowDown": {\r\n                //down\r\n                this.moveDown();\r\n                break;\r\n            }\r\n            case "KeyS": {\r\n                //down\r\n                this.moveDown();\r\n                break;\r\n            }\r\n        }\r\n    };\r\n    HtmlGameGrid.prototype.handleKeyDown = function (event) {\r\n        if (this.options.arrow_controls) {\r\n            if (event.code === "ArrowUp" ||\r\n                event.code === "ArrowRight" ||\r\n                event.code === "ArrowDown" ||\r\n                event.code === "ArrowLeft") {\r\n                event.preventDefault();\r\n                this.handleDirection(event);\r\n            }\r\n        }\r\n        if (this.options.wasd_controls) {\r\n            if (event.code === "KeyW" ||\r\n                event.code === "KeyD" ||\r\n                event.code === "KeyS" ||\r\n                event.code === "KeyA") {\r\n                event.preventDefault();\r\n                this.handleDirection(event);\r\n            }\r\n        }\r\n    };\r\n    HtmlGameGrid.prototype.handleCellClick = function (event) {\r\n        if (this.getOptions().clickable) {\r\n            if (event.target instanceof HTMLElement) {\r\n                var cellEl = event.target.closest(\'[data-gamegrid-ref="cell"]\');\r\n                if (cellEl) {\r\n                    var coords = cellEl\r\n                        .getAttribute("data-gamegrid-coords")\r\n                        .split(",")\r\n                        .map(function (n) { return Number(n); });\r\n                    this.setFocusToCell.apply(this, coords);\r\n                }\r\n                else {\r\n                    this.setFocusToCell();\r\n                }\r\n            }\r\n        }\r\n    };\r\n    HtmlGameGrid.prototype.containerFocus = function () {\r\n        this.getRefs().container.classList.add(this.options.active_class);\r\n    };\r\n    HtmlGameGrid.prototype.containerBlur = function () {\r\n        this.getRefs().container.classList.remove(this.options.active_class);\r\n    };\r\n    // SET UP\r\n    HtmlGameGrid.prototype.attachHandlers = function () {\r\n        this.getRefs().container.addEventListener("keydown", this.handleKeyDown);\r\n        this.getRefs().container.addEventListener("focus", this.containerFocus);\r\n        this.getRefs().container.addEventListener("blur", this.containerBlur);\r\n        this.getRefs().container.addEventListener("click", this.handleCellClick);\r\n    };\r\n    HtmlGameGrid.prototype.dettachHandlers = function () {\r\n        this.getRefs().container.removeEventListener("keydown", this.handleKeyDown);\r\n        this.getRefs().container.removeEventListener("focus", this.containerFocus);\r\n        this.getRefs().container.removeEventListener("blur", this.containerBlur);\r\n        this.getRefs().container.removeEventListener("click", this.handleCellClick);\r\n    };\r\n    return HtmlGameGrid;\r\n}());\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (HtmlGameGrid);\r\n\n\n//# sourceURL=webpack://GamGrid/./src/index.ts?')},"./src/utils.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "renderAttributes": () => (/* binding */ renderAttributes),\n/* harmony export */   "getCoordsFromElement": () => (/* binding */ getCoordsFromElement),\n/* harmony export */   "fireCustomEvent": () => (/* binding */ fireCustomEvent),\n/* harmony export */   "mapRowColIndicesToXY": () => (/* binding */ mapRowColIndicesToXY),\n/* harmony export */   "mapXYToRowColIndices": () => (/* binding */ mapXYToRowColIndices)\n/* harmony export */ });\n/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enums */ "./src/enums.js");\nvar __assign = (undefined && undefined.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction getKeyByValue(object, value) {\r\n    return Object.keys(object).find(function (key) { return object[key] === value; });\r\n}\r\nfunction renderAttributes(el, tuples) {\r\n    tuples.forEach(function (tuple) {\r\n        el.setAttribute(tuple[0], tuple[1]);\r\n    });\r\n}\r\nfunction getCoordsFromElement(el) {\r\n    var _a;\r\n    try {\r\n        return (_a = el === null || el === void 0 ? void 0 : el.getAttribute("data-coords")) === null || _a === void 0 ? void 0 : _a.split(",").map(function (num) { return parseInt(num); });\r\n    }\r\n    catch (err) {\r\n        this.handleError(err);\r\n    }\r\n}\r\nfunction fireCustomEvent(eventName, data) {\r\n    window.dispatchEvent(new CustomEvent(eventName, {\r\n        detail: __assign(__assign({}, data), { game_grid_instance: this }),\r\n        bubbles: true,\r\n    }));\r\n    if (this.options.callbacks) {\r\n        this.options.callbacks[getKeyByValue(_enums__WEBPACK_IMPORTED_MODULE_0__.gridEventsEnum, eventName)]\r\n            ? this.options.callbacks[getKeyByValue(_enums__WEBPACK_IMPORTED_MODULE_0__.gridEventsEnum, eventName)](this)\r\n            : null;\r\n    }\r\n}\r\nfunction mapRowColIndicesToXY(rI, cI) {\r\n    return [rI, cI].reverse().map(function (num) { return ++num; });\r\n}\r\nfunction mapXYToRowColIndices(x, y) {\r\n    return [x, y].reverse().map(function (num) { return --num; });\r\n}\r\n\n\n//# sourceURL=webpack://GamGrid/./src/utils.ts?')},"./src/enums.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "gridEventsEnum": () => (/* binding */ gridEventsEnum),\n/* harmony export */   "cellTypeEnum": () => (/* binding */ cellTypeEnum)\n/* harmony export */ });\nconst gridEventsEnum = {\r\n  RENDERED: "gamegridhtml:grid:rendered",\r\n  STATE_UPDATED: "gamegridhtml:state:updated",\r\n\r\n  MOVE_LEFT: "gamegridhtml:move:left",\r\n  MOVE_RIGHT: "gamegridhtml:move:right",\r\n  MOVE_UP: "gamegridhtml:move:up",\r\n  MOVE_DOWN: "gamegridhtml:move:down",\r\n\r\n  MOVE_BLOCKED: "gamegridhmtl:move:blocked", // hits a wall\r\n  MOVE_COLLISION: "gamegridhtml:move:collide", // overlaps another entity\r\n  MOVE_DETTACH: "gamegridhtml:move:dettach", // leaves overlapping an entity\r\n  MOVE_LAND: "gamegridhtml:move:land", // move finished\r\n\r\n  LIMIT: "gamegridhtml:limit",\r\n  LIMIT_X: "gamegridhtml:limit:x",\r\n  LIMIT_Y: "gamegridhtml:limit:y",\r\n\r\n  WRAP: "gamegridhtml:wrap",\r\n  WRAP_X: "gamegridhtml:wrap:x",\r\n  WRAP_Y: "gamegridhtml:wrap:y",\r\n};\r\n\r\n/**\r\n * Taxonomy:\r\n * You get BLOCKED by Barriers\r\n * You COLLIDE with Interactive cells\r\n * You DETTACH from Interactive cells\r\n * You LAND on an open cell\r\n *\r\n */\r\n\r\nconst cellTypeEnum = {\r\n  OPEN: "open",\r\n  BARRIER: "barrier",\r\n  INTERACTIVE: "interactive",\r\n};\r\n\n\n//# sourceURL=webpack://GamGrid/./src/enums.js?')}},__webpack_module_cache__={};function __nested_webpack_require_38134__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[e]={id:e,exports:{}};return __webpack_modules__[e](t,t.exports,__nested_webpack_require_38134__),t.exports}__nested_webpack_require_38134__.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return __nested_webpack_require_38134__.d(n,{a:n}),n},__nested_webpack_require_38134__.d=(e,n)=>{for(var t in n)__nested_webpack_require_38134__.o(n,t)&&!__nested_webpack_require_38134__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},__nested_webpack_require_38134__.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),__nested_webpack_require_38134__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__nested_webpack_require_38134__("./src/index.ts");return __webpack_exports__})()}));

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./node_modules/sass-loader/dist/cjs.js!./demo/demo.scss":
/*!***************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./node_modules/sass-loader/dist/cjs.js!./demo/demo.scss ***!
  \***************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/cssWithMappingToString.js */ "./node_modules/css-loader/dist/runtime/cssWithMappingToString.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@-webkit-keyframes glow {\n  from {\n    color: green;\n    text-decoration: underline; }\n  to {\n    color: black;\n    text-decoration: none; } }\n\n@keyframes glow {\n  from {\n    color: green;\n    text-decoration: underline; }\n  to {\n    color: black;\n    text-decoration: none; } }\n\n.GameGrid__stage {\n  max-width: 400px; }\n  .GameGrid__stage.active {\n    outline: 2px solid red; }\n\n.GameGrid__tile {\n  display: flex;\n  justify-content: center;\n  align-items: center; }\n  .GameGrid__tile.active {\n    background-color: aliceblue;\n    outline: 3px solid red; }\n  .GameGrid__tile.flipped {\n    background-color: blue; }\n\n[data-cell-type=\"barrier\"] {\n  background-color: coral; }\n\n[data-cell-type=\"interactive\"] {\n  background-color: green; }\n", "",{"version":3,"sources":["webpack://./demo/demo.scss"],"names":[],"mappings":"AAAA;EACE;IACE,YAAY;IACZ,0BAA0B,EAAA;EAE5B;IACE,YAAY;IACZ,qBAAqB,EAAA,EAAA;;AAPzB;EACE;IACE,YAAY;IACZ,0BAA0B,EAAA;EAE5B;IACE,YAAY;IACZ,qBAAqB,EAAA,EAAA;;AAKvB;EAEE,gBAAgB,EAAA;EAFjB;IAIG,sBAAsB,EAAA;;AAI1B;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB,EAAA;EAHpB;IAMG,2BAA2B;IAC3B,sBAAsB,EAAA;EAPzB;IAWG,sBAAsB,EAAA;;AAR5B;EAaE,uBAAuB,EAAA;;AAVzB;EAaE,uBAAuB,EAAA","sourcesContent":["@keyframes glow {\r\n  from {\r\n    color: green;\r\n    text-decoration: underline;\r\n  }\r\n  to {\r\n    color: black;\r\n    text-decoration: none;\r\n  }\r\n}\r\n\r\n.GameGrid {\r\n  &__stage {\r\n    // max-height: 200px;\r\n    max-width: 400px;\r\n    &.active {\r\n      outline: 2px solid red;\r\n    }\r\n  }\r\n\r\n  &__tile {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    &.active {\r\n      background-color: aliceblue;\r\n      outline: 3px solid red;\r\n    }\r\n\r\n    &.flipped {\r\n      background-color: blue;\r\n    }\r\n  }\r\n}\r\n[data-cell-type=\"barrier\"] {\r\n  background-color: coral;\r\n}\r\n[data-cell-type=\"interactive\"] {\r\n  background-color: green;\r\n}\r\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names
module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item);

      if (item[2]) {
        return "@media ".concat(item[2], " {").concat(content, "}");
      }

      return content;
    }).join("");
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery, dedupe) {
    if (typeof modules === "string") {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, ""]];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var i = 0; i < this.length; i++) {
        // eslint-disable-next-line prefer-destructuring
        var id = this[i][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = [].concat(modules[_i]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        // eslint-disable-next-line no-continue
        continue;
      }

      if (mediaQuery) {
        if (!item[2]) {
          item[2] = mediaQuery;
        } else {
          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/cssWithMappingToString.js":
/*!************************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/cssWithMappingToString.js ***!
  \************************************************************************/
/***/ ((module) => {

"use strict";


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

module.exports = function cssWithMappingToString(item) {
  var _item = _slicedToArray(item, 4),
      content = _item[1],
      cssMapping = _item[3];

  if (typeof btoa === "function") {
    // eslint-disable-next-line no-undef
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || "").concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join("\n");
  }

  return [content].join("\n");
};

/***/ }),

/***/ "./demo/demo.scss":
/*!************************!*\
  !*** ./demo/demo.scss ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_1_use_2_node_modules_sass_loader_dist_cjs_js_demo_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!../node_modules/sass-loader/dist/cjs.js!./demo.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./node_modules/sass-loader/dist/cjs.js!./demo/demo.scss");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_1_use_2_node_modules_sass_loader_dist_cjs_js_demo_scss__WEBPACK_IMPORTED_MODULE_1__.default, options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_1_use_2_node_modules_sass_loader_dist_cjs_js_demo_scss__WEBPACK_IMPORTED_MODULE_1__.default.locals || {});

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

var stylesInDom = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDom.length; i++) {
    if (stylesInDom[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var index = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3]
    };

    if (index !== -1) {
      stylesInDom[index].references++;
      stylesInDom[index].updater(obj);
    } else {
      stylesInDom.push({
        identifier: identifier,
        updater: addStyle(obj, options),
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function insertStyleElement(options) {
  var style = document.createElement('style');
  var attributes = options.attributes || {};

  if (typeof attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : 0;

    if (nonce) {
      attributes.nonce = nonce;
    }
  }

  Object.keys(attributes).forEach(function (key) {
    style.setAttribute(key, attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.media ? "@media ".concat(obj.media, " {").concat(obj.css, "}") : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  } else {
    style.removeAttribute('media');
  }

  if (sourceMap && typeof btoa !== 'undefined') {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    if (Object.prototype.toString.call(newList) !== '[object Array]') {
      return;
    }

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDom[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDom[_index].references === 0) {
        stylesInDom[_index].updater();

        stylesInDom.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./src/enums.js":
/*!**********************!*\
  !*** ./src/enums.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gridEventsEnum": () => (/* binding */ gridEventsEnum),
/* harmony export */   "cellTypeEnum": () => (/* binding */ cellTypeEnum)
/* harmony export */ });
const gridEventsEnum = {
  RENDERED: "gamegridhtml:grid:rendered",
  STATE_UPDATED: "gamegridhtml:state:updated",

  MOVE_LEFT: "gamegridhtml:move:left",
  MOVE_RIGHT: "gamegridhtml:move:right",
  MOVE_UP: "gamegridhtml:move:up",
  MOVE_DOWN: "gamegridhtml:move:down",

  MOVE_BLOCKED: "gamegridhmtl:move:blocked", // hits a wall
  MOVE_COLLISION: "gamegridhtml:move:collide", // overlaps another entity
  MOVE_DETTACH: "gamegridhtml:move:dettach", // leaves overlapping an entity
  MOVE_LAND: "gamegridhtml:move:land", // move finished

  LIMIT: "gamegridhtml:limit",
  LIMIT_X: "gamegridhtml:limit:x",
  LIMIT_Y: "gamegridhtml:limit:y",

  WRAP: "gamegridhtml:wrap",
  WRAP_X: "gamegridhtml:wrap:x",
  WRAP_Y: "gamegridhtml:wrap:y",
};

/**
 * Taxonomy:
 * You get BLOCKED by Barriers
 * You COLLIDE with Interactive cells
 * You DETTACH from Interactive cells
 * You LAND on an open cell
 *
 */

const cellTypeEnum = {
  OPEN: "open",
  BARRIER: "barrier",
  INTERACTIVE: "interactive",
};


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./demo/demo.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _demo_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./demo.scss */ "./demo/demo.scss");
/* harmony import */ var _dist_main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../dist/main */ "./dist/main.js");
/* harmony import */ var _dist_main__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_dist_main__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _src_enums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../src/enums */ "./src/enums.js");





// import { gridEventsEnum, tileTypeEnum } from "../src/old/enums";
const tileTypeEnum = {
  OPEN: "open",
  INTERACTIVE: "interactive",
  BARRIER: "barrier",
};

const matrix = [
  [
    {
      type: tileTypeEnum.OPEN,
      cellAttributes: [["data-butt", "sauce"]],
      renderFunction: function () {
        return document.createElement("input");
      },
    },
    { type: tileTypeEnum.OPEN },
    { type: tileTypeEnum.OPEN },
    {
      type: tileTypeEnum.INTERACTIVE,
      cellAttributes: [["data-cell-type", "interactive"]],
    },
  ],
  [
    { type: tileTypeEnum.OPEN },
    { type: tileTypeEnum.OPEN },
    { type: tileTypeEnum.OPEN },
    {
      type: tileTypeEnum.BARRIER,
      cellAttributes: [["data-cell-type", "barrier"]],
    },
  ],
  [
    { type: tileTypeEnum.OPEN },
    { type: tileTypeEnum.OPEN },
    { type: tileTypeEnum.OPEN },
    {
      type: tileTypeEnum.BARRIER,
      cellAttributes: [["data-cell-type", "barrier"]],
    },
    { type: tileTypeEnum.OPEN },
    { type: tileTypeEnum.OPEN },
  ],
  [
    { type: tileTypeEnum.OPEN },
    { type: tileTypeEnum.OPEN },
    {
      type: tileTypeEnum.BARRIER,
      cellAttributes: [["data-cell-type", "barrier"]],
    },
    { type: tileTypeEnum.OPEN },
  ],
];
const $clickable = document.querySelector('[data-ref="Checkbox.clickable"]');
const $infinite_x = document.querySelector('[data-ref="Checkbox.infinite_x"]');
const $infinite_y = document.querySelector('[data-ref="Checkbox.infinite_y"]');
const $arrow_controls = document.querySelector(
  '[data-ref="Checkbox.arrow_controls"]'
);
const $wasd_controls = document.querySelector(
  '[data-ref="Checkbox.wasd_controls"]'
);

const g = new (_dist_main__WEBPACK_IMPORTED_MODULE_1___default())("#app", {
  matrix,
  options: {
    infinite_y: $infinite_y.checked,
    infinite_x: $infinite_x.checked,
    clickable: $clickable.checked,
    arrow_controls: $arrow_controls.checked,
    wasd_controls: $wasd_controls.checked,
    callbacks: {
      LIMIT: function (x) {
        console.log("callback for LIMIT", x);
      },
      WRAP_Y: function (x) {
        console.log("callback WRAP_Y", x);
      },
    },
  },
});

window.gamegrid = g;

const form = document.querySelector('[data-ref="Form.settings"]');
const checkboxes = Array.from(form.querySelectorAll('input[type="checkbox"]'));

checkboxes.forEach((cb) => {
  cb.addEventListener("change", () => {
    g.setOptions({
      infinite_y: $infinite_y.checked,
      infinite_x: $infinite_x.checked,
      clickable: $clickable.checked,
      arrow_controls: $arrow_controls.checked,
      wasd_controls: $wasd_controls.checked,
    });
    g.destroy();
    document.querySelector("#app").innerHTML = '';
    g.render();
    g.init();
  });
});

Object.keys(_src_enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum).forEach(function (key) {
  window.addEventListener(_src_enums__WEBPACK_IMPORTED_MODULE_2__.gridEventsEnum[key], function (event) {
    console.log(event.type, " ---- ", event.detail);
    document.querySelector("#event").textContent = `${event.type}
    ${document.querySelector("#event").textContent}`;
  });
});

g.render();

g.init();

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,